// Report template and generation functions for client-side report creation
// This file uses data-translate attributes for cleaner translation handling

class ReportTemplate {
    // Generate the complete HTML template (simplified version using data-translate)
    static getHTMLTemplate() {
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title data-translate="title">RAADS-R Assessment Report</title>
    <style>
        /* Print-optimized CSS */
        @media print {
            body { 
                font-size: 11pt; 
                line-height: 1.4; 
                color: #000;
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
                margin: 0;
                padding: 0;
            }
            .page-break { page-break-before: always; }
            .no-print { display: none; }
            
            /* Show title page only in print */
            .title-page { display: flex !important; }
            
            /* Headers and footers */
            @page {
                margin: 1cm 1cm 1cm 1cm;
                @top-left {
                    content: var(--report-title, "RAADS-R Assessment Report");
                    font-size: 12pt;
                    font-weight: bold;
                    color: #2c3e50;
                    border-bottom: 2px solid #3498db;
                }
                @top-center {
                    content: var(--participant-header, "Participant");
                    font-size: 12pt;
                    font-weight: bold;
                    color: #2c3e50;
                    border-bottom: 2px solid #3498db;
                }
                @top-right {
                    content: "Page " counter(page);
                    font-size: 12pt;
                    font-weight: bold;
                    color: #2c3e50;
                    border-bottom: 2px solid #3498db;
                }
                @bottom-center {
                    content: var(--generated-by, "Generated by raphink.github.io/raads-r");
                    font-size: 9pt;
                    color: #666;
                    border-top: 1px solid #ddd;
                }
            }
            
            /* No header/footer on front page */
            @page title-page {
                margin: 0;
                @top-left { content: none; }
                @top-center { content: none; }
                @top-right { content: none; }
                @bottom-center { content: none; }
            }
            
            /* Ensure colors print */
            * {
                -webkit-print-color-adjust: exact !important;
                color-adjust: exact !important;
            }
            
            /* Front page styling */
            .title-page {
                page-break-after: always;
                page: title-page;
                height: 90vh;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                text-align: center;
                background: white !important;
                color: #2c3e50 !important;
                padding: 40px;
                border: 3px solid #2c3e50 !important;
            }
            
            .title-page h1 {
                font-size: 42pt !important;
                margin-bottom: 15px !important;
                border: none !important;
                color: #2c3e50 !important;
                font-weight: bold !important;
            }
            
            .title-page .subtitle {
                font-size: 20pt !important;
                margin-bottom: 30px !important;
                color: #34495e !important;
                font-style: italic !important;
            }
            
            .title-page .assessment-info {
                background: #f8f9fa !important;
                padding: 25px !important;
                border-radius: 10px !important;
                margin: 30px 0 !important;
                border: 2px solid #2c3e50 !important;
            }
            
            .title-page .participant-details {
                margin: 20px 0 !important;
                font-size: 16pt !important;
                color: #2c3e50 !important;
            }
            
            .title-page .footer-info {
                margin-top: 30px !important;
                font-size: 11pt !important;
                color: #7f8c8d !important;
            }
            
            /* Chart styling for print */
            .score-bar {
                color: #000 !important;
                background-color: #7bc4f5 !important;
                border: 1px solid #000 !important;
                font-weight: bold !important;
            }
            
            .threshold-marker::after,
            .average-marker::after {
                color: #000 !important;
                font-weight: bold !important;
            }
            
            .threshold-marker {
                background-color: #e74c3c !important;
                border: 2px solid #000 !important;
            }
            
            .average-marker {
                background-color: #27ae60 !important;
                border: 2px solid #000 !important;
            }
            
            .score-display {
                color: #7bc4f5 !important;
                font-weight: bold !important;
            }
            
            .chart-container-inner {
                border: 2px solid #000 !important;
                background: #e8e8e8 !important;
            }
            
            .chart-wrapper {
                background: #f9f9f9 !important;
                border: 1px solid #000 !important;
            }
            
            .score-summary {
                background: #f8f9fa !important;
                border: 1px solid #000 !important;
            }
            
            .participant-info {
                background: #f8f9fa !important;
                border: 1px solid #000 !important;
                page-break-inside: avoid;
            }
            
            .participant-field input {
                border: none !important;
                border-bottom: 1px solid #000 !important;
                border-radius: 0 !important;
                background: transparent !important;
                box-shadow: none !important;
                padding: 2px 0 !important;
                font-weight: bold !important;
            }
            
            /* Appendix print styling */
            .question-item {
                background: #f8f9fa !important;
                border: 1px solid #000 !important;
                box-shadow: none !important;
                page-break-inside: avoid;
                margin-bottom: 10px;
            }
            
            .answer-section {
                background: white !important;
                border-left: 2px solid #3498db !important;
            }
            
            .comment-text {
                background: #ecf0f1 !important;
                border: 1px solid #bdc3c7 !important;
            }
            
            /* Color preservation for category badges */
            .question-category.social { background: #e74c3c !important; color: white !important; }
            .question-category.language { background: #f39c12 !important; color: white !important; }
            .question-category.sensory { background: #27ae60 !important; color: white !important; }
            .question-category.restricted { background: #9b59b6 !important; color: white !important; }
            
            .question-number {
                background: #3498db !important;
                color: white !important;
            }
            
            .score-badge {
                background: #27ae60 !important;
                color: white !important;
            }
        }
        
        /* Hide title page in normal view */
        .title-page {
            display: none;
        }
        
        body {
            font-family: 'Georgia', 'Times New Roman', serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
            background: white;
        }
        
        h1, h2, h3 {
            color: #2c3e50;
            margin-top: 1.5em;
            margin-bottom: 0.5em;
        }
        
        h1 {
            text-align: center;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }
        
        .score-summary {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        
        /* Interpretation card styles */
        .interpretation-card {
            border-left: 4px solid;
            border-radius: 8px;
            background: #fff;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .interp-none { border-left-color: #28a745; }
        .interp-light { border-left-color: #ffc107; }
        .interp-moderate { border-left-color: #fd7e14; }
        .interp-possible { border-left-color: #dc3545; }
        .interp-strong { border-left-color: #6f42c1; }
        .interp-solid { border-left-color: #343a40; }
        .interp-very-strong { border-left-color: #000; }
        
        .total-score-card {
            text-align: center;
            padding: 30px;
            margin: 30px 0;
        }
        
        .total-score-number {
            font-size: 48px;
            font-weight: bold;
            margin: 10px 0;
        }
        
        .interpretation-level {
            font-size: 24px;
            font-weight: bold;
            margin: 15px 0;
        }
        
        .interpretation-description {
            font-size: 16px;
            color: #666;
            margin-top: 10px;
        }
        
        /* Color classes for interpretation levels */
        .text-success { color: #28a745; }
        .text-warning { color: #ffc107; }
        .text-danger { color: #dc3545; }
        .text-dark { color: #343a40; }
        
        .score-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .score-item {
            text-align: center;
            padding: 15px;
            background: white;
            border-radius: 6px;
            border: 1px solid #ddd;
        }
        
        .score-value {
            font-size: 24px;
            font-weight: bold;
            color: #7bc4f5;
        }
        
        .score-label {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }
        
        .chart-container {
            margin: 30px 0;
            text-align: center;
        }
        
        .chart-wrapper {
            display: flex;
            justify-content: space-around;
            align-items: flex-end;
            height: 400px;
            margin: 20px 0;
            padding: 30px;
            border: 1px solid #ddd;
            background: #f9f9f9;
        }
        
        .chart-item {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 120px;
            position: relative;
        }
        
        .chart-label {
            font-size: 12px;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
            color: #666;
        }
        
        .chart-container-inner {
            position: relative;
            width: 60px;
            height: 380px;
            border: 1px solid #bbb;
            background: #e8e8e8;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
        }
        
        .score-bar {
            width: 100%;
            background-color: #7bc4f5;
            border-radius: 2px 2px 0 0;
            display: flex;
            align-items: flex-end;
            justify-content: center;
            color: white;
            font-size: 11px;
            font-weight: bold;
            padding-bottom: 3px;
            min-height: 2px;
        }
        
        .score-display {
            position: absolute;
            bottom: -25px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 14px;
            font-weight: bold;
            color: #7bc4f5;
            text-align: center;
        }
        
        .threshold-marker {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
            width: 12px;
            height: 12px;
            background-color: #e74c3c;
            border: 2px solid #c0392b;
            border-radius: 50%;
        }
        
        .threshold-marker::after {
            content: attr(data-label);
            position: absolute;
            left: 18px;
            font-size: 9px;
            color: #e74c3c;
            font-weight: bold;
            white-space: nowrap;
        }
        
        .average-marker {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
            width: 10px;
            height: 10px;
            background-color: #27ae60;
            border: 2px solid #229954;
            border-radius: 2px;
            transform: translateX(-50%) rotate(45deg);
        }
        
        .average-marker::after {
            content: attr(data-label);
            position: absolute;
            left: 18px;
            font-size: 9px;
            color: #27ae60;
            font-weight: bold;
            white-space: nowrap;
            transform: rotate(-45deg);
        }
        
        .max-score-label {
            position: absolute;
            top: -15px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 9px;
            color: #666;
            font-weight: bold;
        }
        
        .chart-legend {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 15px;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
        }
        
        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 2px;
        }
        
        .legend-color.threshold-marker {
            border-radius: 50%;
            background-color: #e74c3c;
            border: 2px solid #c0392b;
            position: relative;
            left: 0;
            transform: none;
        }
        
        .legend-color.average-marker {
            background-color: #27ae60;
            border: 2px solid #229954;
            border-radius: 2px;
            position: relative;
            left: 5px;
        }
        
        .markdown-content {
            line-height: 1.6;
            margin: 30px 0;
        }
        
        .markdown-content p {
            margin: 1em 0;
        }
        
        .markdown-content ul {
            margin: 1em 0;
            padding-left: 2em;
        }
        
        .markdown-content li {
            margin: 0.5em 0;
        }
        
        .print-btn {
            background: #7bc4f5;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 20px 0;
        }
        
        .print-btn:hover {
            background: #2980b9;
        }
        
        .close-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 20px 0 20px 10px;
        }
        
        .close-btn:hover {
            background: #c0392b;
        }
        
        /* Participant information styling */
        .participant-info {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .participant-field {
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .participant-field label {
            font-weight: bold;
            color: #2c3e50;
            min-width: 140px;
            display: inline-block;
        }
        
        .participant-field input {
            flex: 1;
            padding: 8px 12px;
            border: 2px solid #dee2e6;
            border-radius: 4px;
            font-size: 14px;
            font-family: inherit;
            transition: border-color 0.3s ease;
            background: white;
        }
        
        .participant-field input:focus {
            outline: none;
            border-color: #7bc4f5;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }
        
        .participant-field input:hover {
            border-color: #bdc3c7;
        }
        
        /* Appendix styling */
        .appendix-container {
            margin-top: 40px;
        }
        
        .question-item {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            margin-bottom: 15px;
            padding: 20px;
            transition: box-shadow 0.2s ease;
        }
        
        .question-item:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .question-number {
            background: #3498db;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            min-width: 40px;
            text-align: center;
        }
        
        .question-category {
            background: #95a5a6;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .question-category.social { background: #e74c3c; }
        .question-category.language { background: #f39c12; }
        .question-category.sensory { background: #27ae60; }
        .question-category.restricted { background: #9b59b6; }
        
        .question-text {
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 12px;
            color: #2c3e50;
        }
        
        .answer-section {
            background: white;
            border-radius: 4px;
            padding: 12px;
            border-left: 4px solid #3498db;
        }
        
        .answer-text {
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 8px;
        }
        
        .comment-text {
            font-style: italic;
            color: #7f8c8d;
            background: #ecf0f1;
            padding: 8px 12px;
            border-radius: 4px;
            margin-top: 8px;
            border-left: 3px solid #bdc3c7;
        }
        
        .score-badge {
            display: inline-block;
            background: #27ae60;
            color: white;
            padding: 2px 6px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: bold;
            margin-left: 8px;
        }
        
        /* Analysis loading animation */
        .analysis-loading {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: shimmer 2s infinite;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
            color: #666;
        }
        
        .analysis-loading::before {
            content: "⏳ ";
            font-size: 1.2em;
        }
        
        @keyframes shimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }
        
        .print-btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
        }
        
        .print-btn:disabled:hover {
            background: #95a5a6;
        }
    </style>
</head>
<body>
    <!-- Report content with data-translate attributes -->
    <div class="no-print">
        <button id="print-btn" class="print-btn" onclick="window.print()" disabled>
            ⏳ Generating Analysis...
        </button>
        <button class="close-btn" onclick="window.close()">
            <span data-translate="close_report">Close Report</span>
        </button>
    </div>
    
    <!-- Title Page -->
    <div class="title-page">
        <h1 data-translate="assessment_report">ASSESSMENT REPORT</h1>
        <div class="subtitle" data-translate="scale_subtitle">Ritvo Autism Asperger Diagnostic Scale - Revised</div>
        
        <div class="participant-details">
            <div style="margin-bottom: 15px;">
                <strong data-translate="participant">Participant:</strong> 
                <span class="participant-name">[Name to be filled]</span>
            </div>
            <div style="margin-bottom: 15px;">
                <strong data-translate="age">Age:</strong> 
                <span class="participant-age">[Age] years</span>
            </div>
        </div>
        
        <div class="assessment-info">
            <div style="font-size: 16pt; margin-bottom: 20px; font-weight: bold;" data-translate="assessment_summary">Assessment Summary</div>
            <div style="font-size: 14pt; margin-bottom: 10px;">
                <span data-translate="total_score">Total Score:</span> 
                <span style="font-weight: bold; font-size: 18pt;" id="total-score-display">--/240</span>
            </div>
            <div style="font-size: 14pt;">
                <span data-translate="assessment_date">Assessment Date:</span> 
                <span style="font-weight: bold;" id="assessment-date-display">--</span>
            </div>
        </div>
        <div class="footer-info" data-translate="footer_disclaimer">
            This report was generated using the RAADS-R assessment tool<br><em>This is not a clinical diagnosis and should not replace professional evaluation</em>
        </div>
    </div>

    <h1 style="margin-top: 40px;" data-translate="assessment_results">Assessment Results</h1>
    
    <!-- Total Score Card -->
    <div class="interpretation-card total-score-card" id="total-score-card">
        <h2 data-translate="total_score">Total Score</h2>
        <div class="total-score-number" id="total-score-number">--/240</div>
        <div class="interpretation-level" id="interpretation-level">--</div>
        <div class="interpretation-description" id="interpretation-description">--</div>
    </div>

    <h2 data-translate="score_distribution">Score Distribution by Domain</h2>
    <div class="chart-container">
        <div class="chart-wrapper" id="chart-container">
            <!-- Chart will be populated by JavaScript -->
        </div>
        <div class="chart-legend">
            <div class="legend-item">
                <div class="legend-color" style="background-color: #7bc4f5;"></div>
                <span data-translate="your_score">Your Score</span>
            </div>
            <div class="legend-item">
                <div class="legend-color threshold-marker"></div>
                <span data-translate="autistic_threshold">Autistic Threshold</span>
            </div>
            <div class="legend-item">
                <div class="legend-color average-marker"></div>
                <span data-translate="neurotypical_average">Neurotypical Average</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #e8e8e8;"></div>
                <span data-translate="maximum_possible">Maximum Possible</span>
            </div>
        </div>
    </div>
    
    <!-- Analysis section with loading state -->
    <div id="analysis-container" class="analysis-loading" data-translate="reportGenerating">
        🔄 Generating Analysis (this may take up to 1 minute)...
    </div>

    <div class="page-break"></div>
    <div class="appendix-container">
        <h2 data-translate="appendix_title">Appendix: Questions and Answers</h2>
        <p style="color: #666; margin-bottom: 20px;" data-translate="appendix_description">Complete assessment responses with participant comments where provided.</p>
        <div id="questions-container">
            <!-- Questions will be populated by JavaScript -->
        </div>
    </div>

    <div class="footer">
        <p>
            <span data-translate="generated_on">Generated on</span> 
            <span id="generated-date">--</span> 
            <span data-translate="by">by</span> 
            raphink.github.io/raads-r
        </p>
        <p>
            <span data-translate="report_id">Report ID:</span> 
            <span id="report-id-display">--</span>
        </p>
    </div>

    <script>
        // ReportTemplate class definition for the report window
        class ReportTemplate {
            // Generate chart HTML
            static generateChart(assessmentData) {
                const scores = assessmentData.scores;
                
                // Maximum scores for each domain
                const maxScores = {
                    social: 117,    // 39 questions × 3 points
                    language: 21,   // 7 questions × 3 points  
                    sensory: 60,    // 20 questions × 3 points
                    restricted: 42, // 14 questions × 3 points
                    total: 240      // Total maximum
                };

                // Thresholds and averages
                const thresholds = { social: 31, language: 4, sensory: 16, restricted: 15, total: 65 };
                const averages = { social: 11, language: 2, sensory: 6, restricted: 8, total: 25 };

                const domains = [
                    { key: 'social', label: 'social' },
                    { key: 'language', label: 'language' },
                    { key: 'sensory', label: 'sensory_motor' },
                    { key: 'restricted', label: 'restricted' },
                    { key: 'total', label: 'total' }
                ];

                let chartHTML = '';
                domains.forEach(domain => {
                    const score = domain.key === 'total' ? scores.total : scores[domain.key];
                    const maxScore = maxScores[domain.key];
                    const threshold = thresholds[domain.key];
                    const average = averages[domain.key];

                    // Calculate container height proportional to max score (total=240 gets full 380px)
                    const baseHeight = 380;
                    const containerHeight = Math.round((maxScore / maxScores.total) * baseHeight);
                    
                    // Calculate bar height as percentage of this domain's container
                    const barHeight = Math.round((score / maxScore) * containerHeight);
                    const thresholdHeight = Math.round((threshold / maxScore) * containerHeight);
                    const averageHeight = Math.round((average / maxScore) * containerHeight);
                    
                    // Calculate bottom positions for markers (from bottom of container)
                    const thresholdBottom = thresholdHeight;
                    const averageBottom = averageHeight;

                    chartHTML += \`
                        <div class="chart-item">
                            <div class="chart-label" data-translate="\${domain.label}">\${domain.label}</div>
                            <div class="chart-container-inner" style="height: \${containerHeight}px;">
                                <div class="max-score-label">\${maxScore}</div>
                                <div class="score-bar" style="height: \${barHeight}px;" title="Score: \${score}/\${maxScore} (\${(score/maxScore*100).toFixed(1)}%)" data-height="\${barHeight}"></div>
                                <div class="threshold-marker" style="bottom: \${thresholdBottom}px;" data-label="\${threshold}"></div>
                                <div class="average-marker" style="bottom: \${averageBottom}px;" data-label="\${average}"></div>
                                <div class="score-display">\${score}</div>
                            </div>
                        </div>
                    \`;
                });

                return chartHTML;
            }

            // Get CSS class for question category
            static getCategoryClass(category) {
                switch (category.toLowerCase()) {
                    case 'is': return 'social';
                    case 'l': return 'language'; 
                    case 'sm': return 'sensory';
                    case 'ir': return 'restricted';
                    default: return '';
                }
            }

            // Generate questions HTML for appendix
            static async generateQuestionsHTML(questionsAndAnswers, language = 'en') {
                try {
                    // Load language data to get answer text mappings
                    const response = await fetch(\`\${language}.json\`);
                    const data = await response.json();
                    const translations = data.report || {};
                    
                    // Fallback answer texts
                    const fallbackAnswers = {
                        0: "Never true",
                        1: "Sometimes true", 
                        2: "Often true",
                        3: "Always true"
                    };

                    const answers = translations.answers || fallbackAnswers;
                    let html = '';

                    for (const qa of questionsAndAnswers) {
                        const categoryClass = this.getCategoryClass(qa.category);
                        const answerText = answers[qa.answer] || \`Answer \${qa.answer}\`;
                        
                        html += \`
                            <div class="question-item" id="question-\${qa.id}">
                                <div class="question-header">
                                    <div class="question-number">\${qa.id}</div>
                                    <div class="question-category \${categoryClass}">\${qa.category}</div>
                                </div>
                                <div class="question-text">\${qa.text}</div>
                                <div class="answer-section">
                                    <div class="answer-text">\${answerText} <span class="score-badge">\${qa.score} pts</span></div>
                                    \${qa.comment ? \`<div class="comment-text">"\${qa.comment}"</div>\` : ''}
                                </div>
                            </div>
                        \`;
                    }

                    return html;
                } catch (error) {
                    console.warn('Failed to load translations for questions:', error);
                    if (language !== 'en') {
                        return this.generateQuestionsHTML(questionsAndAnswers, 'en');
                    }
                    return '';
                }
            }

            // Get interpretation based on score with static fallbacks for robustness
            static getInterpretation(score, lang = null) {
                // If no language data available, use English fallbacks
                const interpretations = lang?.ui?.results?.interpretations || {
                    none: { level: "No ASD", description: "No signs of autism detected" },
                    light: { level: "Mild traits", description: "Some autistic traits, but probably no ASD" },
                    moderate: { level: "Moderate traits", description: "Several autistic traits present" },
                    possible: { level: "Possible ASD", description: "Minimum score at which autism is considered" },
                    strong: { level: "Strong indication of ASD", description: "Strong indication of autism spectrum disorder" },
                    solid: { level: "Solid evidence of ASD", description: "Solid evidence of ASD (average score of autistic individuals)" },
                    veryStrong: { level: "Very strong evidence of ASD", description: "Very strong evidence of autism spectrum disorder" }
                };
                
                if (score < 25) return { 
                    level: interpretations.none.level, 
                    color: "text-success", 
                    class: "interp-none", 
                    description: interpretations.none.description 
                };
                if (score < 50) return { 
                    level: interpretations.light.level, 
                    color: "text-warning", 
                    class: "interp-light", 
                    description: interpretations.light.description 
                };
                if (score < 65) return { 
                    level: interpretations.moderate.level, 
                    color: "text-warning", 
                    class: "interp-moderate", 
                    description: interpretations.moderate.description 
                };
                if (score < 90) return { 
                    level: interpretations.possible.level, 
                    color: "text-danger", 
                    class: "interp-possible", 
                    description: interpretations.possible.description 
                };
                if (score < 130) return { 
                    level: interpretations.strong.level, 
                    color: "text-danger", 
                    class: "interp-strong", 
                    description: interpretations.strong.description 
                };
                if (score < 160) return { 
                    level: interpretations.solid.level, 
                    color: "text-dark", 
                    class: "interp-solid", 
                    description: interpretations.solid.description 
                };
                return { 
                    level: interpretations.veryStrong.level, 
                    color: "text-dark", 
                    class: "interp-very-strong", 
                    description: interpretations.veryStrong.description 
                };
            }

            // Populate the enhanced total score card
            static populateTotalScoreCard(assessmentData) {
                const totalScore = assessmentData.scores.total;
                const interpretation = this.getInterpretation(totalScore, window.lang);
                
                // Update the total score card elements
                const scoreNumberElement = document.getElementById('total-score-number');
                const levelElement = document.getElementById('interpretation-level');
                const descriptionElement = document.getElementById('interpretation-description');
                const cardElement = document.getElementById('total-score-card');
                
                if (scoreNumberElement) {
                    scoreNumberElement.textContent = totalScore + '/240';
                }
                
                if (levelElement) {
                    levelElement.textContent = interpretation.level;
                    levelElement.className = 'interpretation-level ' + interpretation.color;
                }
                
                if (descriptionElement) {
                    descriptionElement.textContent = interpretation.description;
                }
                
                if (cardElement) {
                    // Add the interpretation class for border color
                    cardElement.className = 'interpretation-card total-score-card ' + interpretation.class;
                }
            }

            // Initialize report with assessment data
            static initializeReport(assessmentData, reportId) {
                console.log('Initializing report with assessment data:', assessmentData);
                console.log('Participant info in assessment data:', assessmentData.participantInfo);
                
                // Store assessment data globally for access by other functions
                window.assessmentData = assessmentData;
                
                // Update basic information
                document.getElementById('total-score-display').textContent = \`\${assessmentData.scores.total}/240\`;
                document.getElementById('assessment-date-display').textContent = new Date(assessmentData.metadata.testDate).toLocaleDateString();
                document.getElementById('generated-date').textContent = new Date().toLocaleDateString();
                document.getElementById('report-id-display').textContent = reportId;

                // Populate the enhanced total score card
                this.populateTotalScoreCard(assessmentData);

                // Generate and insert chart
                const chartHTML = this.generateChart(assessmentData);
                document.getElementById('chart-container').innerHTML = chartHTML;

                // Debug: Check actual bar heights after rendering
                setTimeout(() => {
                    const scoreBars = document.querySelectorAll('.score-bar');
                    scoreBars.forEach((bar, index) => {
                        const computedStyle = window.getComputedStyle(bar);
                        const dataHeight = bar.getAttribute('data-height');
                        console.log(\`Bar \${index}: data-height=\${dataHeight}%, computed height=\${computedStyle.height}, parent height=\${window.getComputedStyle(bar.parentElement).height}\`);
                    });
                }, 100);

                // Generate and insert questions
                this.generateQuestionsHTML(assessmentData.questionsAndAnswers, assessmentData.language).then(questionsHTML => {
                    document.getElementById('questions-container').innerHTML = questionsHTML;
                });
                
                // Initialize participant info now that we have the data
                if (typeof initializeParticipantInfo === 'function') {
                    console.log('Calling initializeParticipantInfo...');
                    initializeParticipantInfo();
                } else {
                    console.warn('initializeParticipantInfo function not found');
                }
            }

            // Update analysis section when backend responds (during streaming)
            static updateAnalysis(analysisHTML) {
                const analysisContainer = document.getElementById('analysis-container');
                if (analysisContainer) {
                    analysisContainer.className = 'markdown-content';
                    analysisContainer.innerHTML = analysisHTML;
                    // Note: Print button stays disabled until streaming completes
                }
            }
            
            // Enable print button when streaming is completely finished
            static enablePrintButton() {
                const printBtn = document.getElementById('print-btn');
                if (printBtn) {
                    printBtn.disabled = false;
                    printBtn.innerHTML = '️<span data-translate="print_report">Print Report</span>';
                    
                    // Re-apply translations to the newly added content
                    if (typeof applyTranslations === 'function' && window.currentTranslations) {
                        applyTranslations(window.currentTranslations);
                    } else {
                        // Fallback: manually translate the print button
                        const printSpan = printBtn.querySelector('[data-translate="print_report"]');
                        if (printSpan && window.currentTranslations && window.currentTranslations.print_report) {
                            printSpan.textContent = window.currentTranslations.print_report;
                        }
                    }
                }
            }
        }

        // Make ReportTemplate available globally in the report window
        window.ReportTemplate = ReportTemplate;
        
        // Translation functionality
        async function loadTranslations(language = 'en') {
            try {
                const response = await fetch(\`\${language}.json\`);
                if (!response.ok) throw new Error(\`Failed to load \${language}.json\`);
                const data = await response.json();
                return data.report || {};
            } catch (error) {
                console.warn(\`Failed to load translations for \${language}:\`, error);
                if (language !== 'en') {
                    return await loadTranslations('en');
                }
                return {};
            }
        }
        
        function applyTranslations(translations) {
            document.querySelectorAll('[data-translate]').forEach(element => {
                const key = element.getAttribute('data-translate');
                if (translations[key]) {
                    if (element.tagName === 'INPUT' && element.hasAttribute('placeholder')) {
                        element.placeholder = translations[key];
                    } else {
                        element.innerHTML = translations[key];
                    }
                }
            });
            
            // Update CSS variables for print headers
            if (translations.header_report_title) {
                document.documentElement.style.setProperty('--report-title', \`"\${translations.header_report_title}"\`);
            }
            if (translations.footer_generated_by) {
                document.documentElement.style.setProperty('--generated-by', \`"\${translations.footer_generated_by}"\`);
            }
        }
        
        // Initialize translations when page loads
        document.addEventListener('DOMContentLoaded', async function() {
            const urlParams = new URLSearchParams(window.location.search);
            const language = urlParams.get('lang') || 'en';
            
            const translations = await loadTranslations(language);
            window.currentTranslations = translations; // Store globally for later use
            applyTranslations(translations);
            
            // Note: initializeParticipantInfo() will be called from initializeReport()
            // after assessment data is available
        });
        
        // Update participant information dynamically
        function initializeParticipantInfo() {
            // Get participant info from the assessment data if available
            const participantInfo = window.assessmentData?.participantInfo;
            console.log('Initializing participant info:', participantInfo);
            
            const name = participantInfo?.name || '[Name to be filled]';
            const age = participantInfo?.age || '[Age]';
            
            console.log('Setting participant info - Name:', name, 'Age:', age);
            
            // Update CSS custom property for print header
            document.documentElement.style.setProperty('--participant-header', \`"\${name} - \${age} years"\`);
            
            // Update front page elements
            document.querySelectorAll('.participant-name').forEach(el => el.textContent = name);
            document.querySelectorAll('.participant-age').forEach(el => el.textContent = age + ' years');
        }
    </script>
</body>
</html>`;
    }

    // Get CSS class for question category
    static getCategoryClass(category) {
        switch (category.toLowerCase()) {
            case 'is': return 'social';
            case 'l': return 'language'; 
            case 'sm': return 'sensory';
            case 'ir': return 'restricted';
            default: return '';
        }
    }

    // Initialize report with assessment data (called immediately)
    static initializeReport(assessmentData, reportId) {
        console.log('Initializing report with assessment data:', assessmentData);
        console.log('Participant info in assessment data:', assessmentData.participantInfo);
        
        // Store assessment data globally for access by other functions
        window.assessmentData = assessmentData;
        
        // Update basic information
        document.getElementById('total-score-display').textContent = `${assessmentData.scores.total}/240`;
        document.getElementById('assessment-date-display').textContent = new Date(assessmentData.metadata.testDate).toLocaleDateString();
        document.getElementById('generated-date').textContent = new Date().toLocaleDateString();
        document.getElementById('report-id-display').textContent = reportId;

        // Generate and insert chart
        const chartHTML = this.generateChart(assessmentData);
        document.getElementById('chart-container').innerHTML = chartHTML;

        // Generate and insert questions
        this.generateQuestionsHTML(assessmentData.questionsAndAnswers, assessmentData.language).then(questionsHTML => {
            document.getElementById('questions-container').innerHTML = questionsHTML;
        });
        
        // Initialize participant info now that we have the data
        if (typeof initializeParticipantInfo === 'function') {
            console.log('Calling initializeParticipantInfo...');
            initializeParticipantInfo();
        } else {
            console.warn('initializeParticipantInfo function not found');
        }
    }

    // Update analysis section when backend responds
    static updateAnalysis(analysisHTML) {
        const analysisContainer = document.getElementById('analysis-container');
        if (analysisContainer) {
            analysisContainer.className = 'markdown-content';
            analysisContainer.innerHTML = analysisHTML;
            // Note: Print button stays disabled until streaming completes
        }
    }

    // Generate complete report (for immediate display)
    static generateReport(assessmentData, reportId, language = 'en') {
        const template = this.getHTMLTemplate();
        
        // Create a new window/tab with the report
        const reportWindow = window.open('', '_blank');
        reportWindow.document.write(template);
        reportWindow.document.close();
        
        // Wait for the document to load, then initialize
        reportWindow.addEventListener('load', () => {
            // Set language parameter for translations
            const url = new URL(reportWindow.location);
            url.searchParams.set('lang', language);
            reportWindow.history.replaceState({}, '', url);
            
            // Initialize the report with data (after a short delay to ensure scripts are loaded)
            setTimeout(() => {
                reportWindow.ReportTemplate.initializeReport(assessmentData, reportId);
            }, 100);
        });
        
        return reportWindow;
    }
    
    // Generate report from cached data (assessment + analysis)
    static generateReportFromCache(assessmentData, analysisHTML, reportId, language = 'en') {
        const template = this.getHTMLTemplate();
        
        // Create a new window/tab with the report
        const reportWindow = window.open('', '_blank');
        reportWindow.document.write(template);
        reportWindow.document.close();
        
        // Wait for the document to load, then initialize with both data and analysis
        reportWindow.addEventListener('load', () => {
            // Set language parameter for translations
            const url = new URL(reportWindow.location);
            url.searchParams.set('lang', language);
            reportWindow.history.replaceState({}, '', url);
            
            // Initialize the report with data and then update with analysis
            setTimeout(() => {
                // Initialize with assessment data first
                reportWindow.ReportTemplate.initializeReport(assessmentData, reportId);
                
                // Then update with the analysis (slight delay to ensure initialization completes)
                setTimeout(() => {
                    reportWindow.ReportTemplate.updateAnalysis(analysisHTML);
                    // Enable print button since this is a complete cached report
                    reportWindow.ReportTemplate.enablePrintButton();
                }, 200);
            }, 200);
        });
        
        return reportWindow;
    }
}

// Export for use in main application
window.ReportTemplate = ReportTemplate;
